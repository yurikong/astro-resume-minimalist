---
interface Props {
  class?: string
}
const { class: className } = Astro.props
---

<toggle-color-scheme class:list={["flex", "items-center", "justify-center", className]} type="button">
  <i></i>
</toggle-color-scheme>

<script>
  import type { TColorScheme } from "~types/color-scheme"

  class ToggleColorScheme extends HTMLElement {
    private colorScheme: TColorScheme = "os"
    private localStorageKey: string = "colorScheme"
    private matchMediaListDark: MediaQueryList = window.matchMedia("(prefers-color-scheme: dark)")

    public connectedCallback(): void {
      this.readColorScheme()
      this.setColorScheme()
      this.addEventListener("click", this.handleClick)
    }

    public disconnectedCallback(): void {
      this.removeEventListener("click", this.handleClick)
    }

    /**
     * Click handler for switching color schemes.
     */
    private handleClick(): void {
      if (this.colorScheme === "os") {
        this.colorScheme = "light"
      } else if (this.colorScheme === "light") {
        this.colorScheme = "dark"
      } else {
        this.colorScheme = "os"
      }
      this.setColorScheme()
    }

    /**
     * Reads color scheme from LocalStorage.
     */
    private readColorScheme(): void {
      const localColorScheme: string = localStorage.getItem(this.localStorageKey) ?? ""
      this.colorScheme = this.isColorScheme(localColorScheme) ? localColorScheme : "os"
    }

    /**
     * Whether `scheme` is of type `TColorScheme`.
     * @param {string} scheme
     * @returns {boolean}
     */
    private isColorScheme(scheme: string): scheme is TColorScheme {
      return scheme === "light" || scheme === "dark" || scheme === "os"
    }

    /**
     * Update icon class name based on color scheme.
     */
    private updateIconClassName(): void {
      const el: HTMLElement | null = this.querySelector("i")
      if (el === null) {
        return
      }
      let iconClassName: string
      if (this.colorScheme === "os") {
        iconClassName = "i-ri:computer-line"
      } else if (this.colorScheme === "light") {
        iconClassName = "i-ri:sun-line"
      } else {
        iconClassName = "i-ri:moon-line"
      }
      const node: HTMLElement = document.createElement("i")
      node.classList.add(iconClassName)
      this.replaceChild(node, el)
    }

    /**
     * Set color scheme.
     */
    private setColorScheme(): void {
      if (this.colorScheme === "os") {
        this.setSystemScheme()
        this.matchMediaListDark.addEventListener("change", this.handleDarkScheme)
      } else if (this.colorScheme === "dark") {
        this.setDarkScheme()
        this.matchMediaListDark.removeEventListener("change", this.handleDarkScheme)
      } else {
        this.setLightScheme()
        this.matchMediaListDark.removeEventListener("change", this.handleDarkScheme)
      }
      this.updateIconClassName()
      localStorage.setItem(this.localStorageKey, this.colorScheme)
    }

    private handleDarkScheme = () => this.setSystemScheme()

    /**
     * Set system color scheme.
     */
    private setSystemScheme(): void {
      if (this.systemIsDark) {
        this.setDarkScheme()
      } else {
        this.setLightScheme()
      }
    }

    /**
     * Whether system color scheme is dark.
     * @returns {boolean}
     */
    public get systemIsDark(): boolean {
      return this.matchMediaListDark.matches
    }

    /**
     * Set dark scheme.
     */
    private setDarkScheme(): void {
      document.documentElement.classList.add("dark")
    }

    /**
     * Set light scheme.
     */
    private setLightScheme(): void {
      document.documentElement.classList.remove("dark")
    }
  }

  customElements.define("toggle-color-scheme", ToggleColorScheme)
</script>
